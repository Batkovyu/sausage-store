include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
#  - template: Security/Container-Scanning.gitlab-ci.yml
#  - template: Security/SAST.gitlab-ci.yml
#  - local: '/.gitlab-ci/.SAST.backend.yml'

#variables:
#  SAST_EXCLUDED_ANALYZERS: "eslint,nodejs-scan,semgrep"

#container_scanning:
#  variables:
#    CS_IMAGE: $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
#    GIT_STRATEGY: fetch
#    CS_DOCKERFILE_PATH: backend/Dockerfile

stages:
   - build
   - test
   - release
   - deploy
   - notify

#build-m2:
#  stage: build
#  script:
#    - cd backend
#    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}
#  artifacts:
#    paths:
#      - ${CI_PROJECT_DIR}/.m2/
#      - backend/target/sausage-store-${VERSION}.jar

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:latest
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --cache-from $CI_REGISTRY_IMAGE/sausage-backend:latest
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$VERSION

upload-backend-latest:
  stage: release
  image: docker:20.10.12-dind-rootless
  variables:
    GIT_STRATEGY: none
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$VERSION $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

deploy-backend:
  stage: deploy
  image: vault:1.12.1
  script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - >
      ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
       export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store)";
       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)";
       export "MONGO_USER=$(vault kv get -field=mongo.username secret/sausage-store)";
       export "MONGO_PASSWORD=$(vault kv get -field=mongo.password secret/sausage-store)";
       export "MONGO_HOST=${MONGO_HOST}";
       export "MONGO_PORT=${MONGO_PORT}";
       export "MONGO_DATABASE=${MONGO_DATABASE}";
       export "MONGO_RS=${MONGO_RS}";
       export "SPRING_FLYWAY_ENABLED=${SPRING_FLYWAY_ENABLED}";
       export "REPORT_PATH=${REPORT_PATH}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./backend/backend_deploy.sh

slack-notification-backend:
  stage: notify
  only:
    variables:
      - '$CI_COMMIT_MESSAGE =~ /send notification/'
  script:
    - |-
        DATA=$(cat << JSON
        {
          "text":"YB - Вышла новая версия backend сосисочной — ${VERSION}. Скачать backend можно по ссылке — <${NEXUS_REPO_URL}/repository/09-sausage-store-batkov-yuriy-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar|Backend ${VERSION}>"
        }
        JSON
        )
    #- echo "$DATA"
    #- >
    #  curl
    #  --request POST
    #  --header "Content-type: application/json"
    #  --data "${DATA}"
    #  "${SLACK_WEBHOOK}"
