include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
   - build
   - release
   - deploy
   - notify

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$VERSION

upload-backend-latest:
  stage: release
  image: docker:20.10.12-dind-rootless
  variables:
    GIT_STRATEGY: none
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$VERSION $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

deploy-backend:
  stage: deploy
  image: alpine:3.15.0
  script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
       export "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}";
       export "MONGO_USER=${MONGO_USER}";
       export "MONGO_PASSWORD=${MONGO_PASSWORD}";
       export "MONGO_HOST=${MONGO_HOST}";
       export "MONGO_PORT=${MONGO_PORT}";
       export "MONGO_DATABASE=${MONGO_DATABASE}";
       export "MONGO_RS=${MONGO_RS}";
       export "SPRING_FLYWAY_ENABLED=${SPRING_FLYWAY_ENABLED}";
       export "REPORT_PATH=${REPORT_PATH}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./backend/backend_deploy.sh

slack-notification-backend:
  stage: notify
  only:
    variables:
      - '$CI_COMMIT_MESSAGE =~ /send notification/'
  script:
    - |-
        DATA=$(cat << JSON
        {
          "text":"YB - Вышла новая версия backend сосисочной — ${VERSION}. Скачать backend можно по ссылке — <${NEXUS_REPO_URL}/repository/09-sausage-store-batkov-yuriy-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar|Backend ${VERSION}>"
        }
        JSON
        )
    #- echo "$DATA"
    #- >
    #  curl
    #  --request POST
    #  --header "Content-type: application/json"
    #  --data "${DATA}"
    #  "${SLACK_WEBHOOK}"
