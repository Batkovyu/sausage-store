include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  - template: Security/Container-Scanning.gitlab-ci.yml

container_scanning:
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
    GIT_STRATEGY: fetch
    CS_DOCKERFILE_PATH: frontend/Dockerfile

stages:
   - build
   - test
   - release
   - deploy
   - notify

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:latest
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --cache-from $CI_REGISTRY_IMAGE/sausage-frontend:latest
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
  after_script:
    - docker create --name frontend-app $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
    - docker cp frontend-app:/dist/ ./frontend/
  artifacts:
    paths:
      - ./frontend

upload-frontend-latest:
  stage: release
  image: docker:20.10.12-dind-rootless
  variables:
    GIT_STRATEGY: none
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh ${DEV_USER}@${DEV_HOST}
      "export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./frontend/frontend_deploy.sh

# TODO:
# 1. implement generic notification templates
# 2. implement failed\success notifications (depends on test results)
# 3. implement cool slack message template

slack-notification-frontend:
  stage: notify
  only:
    variables:
      - '$CI_COMMIT_MESSAGE =~ /send notification/'
  script:
    - |-
        DATA=$(cat << JSON
        {
          "text":"YB - Вышла новая версия frontend сосисочной — ${VERSION}. Скачать frontend можно по ссылке — <${NEXUS_REPO_URL}/repository/09-sausage-store-batkov-yuriy-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz|Frontend ${VERSION}>"
        }
        JSON
        )
    - echo "$DATA"
    #- >
    #  curl
    #  --request POST
    #  --header "Content-type: application/json"
    #  --data "${DATA}"
    #  "${SLACK_WEBHOOK}"
